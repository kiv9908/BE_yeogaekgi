# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # 환경별 yml 파일 생성
    - name: make application-dev.yml
      if: contains(github.ref, 'develop')
      run: |
        cd ./src/main/resources
        touch ./application.yml
        echo "${{ secrets.YML }}" > ./application.yml
      shell: bash

    # gradle chmod
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

      

    # gradle build
    - name: Build with Gradle
      run: ./gradlew clean build -x test

    # docker login
    - name: Docker Hub Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # docker build & push to production
    - name: Docker build & push to prod
      if: contains(github.ref, 'develop')
      run: |
        docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/be-yeogackgi .
        docker push ${{ secrets.DOCKER_REPO }}/be-yeogackgi

    ## deploy to production
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy-prod
      if: contains(github.ref, 'develop')
      with:
        host: ${{ secrets.HOST_PROD }} # EC2 퍼블릭 IPv4 DNS
        username: ubuntu
        key: ${{ secrets.PRIVATE_KEY }}
        envs: GITHUB_SHA
        script: |
          sudo docker ps
          sudo docker rm -f $(docker ps -qa)
          sudo docker pull ${{ secrets.DOCKER_REPO }}/be-yeogackgi:latest
          sudo docker run -d -p 80:8090 ${{ secrets.DOCKER_REPO }}/be-yeogackgi:latest
          sudo docker image prune -f
